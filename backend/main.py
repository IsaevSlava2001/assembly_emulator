"""
FastAPI —Å–µ—Ä–≤–∏—Å –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ –±–µ–∑–∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç–µ–∫–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
from fastapi import FastAPI, HTTPException, UploadFile, File, status
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Dict, Optional, Any
import json
import io
from emulator import StackEmulator, OpCode

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class ProgramRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    instructions: List[int] = Field(...,
        description="–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –≤–∏–¥–µ 32-–±–∏—Ç–Ω—ã—Ö —á–∏—Å–µ–ª",
        example=[1296, 784, 1, 153])
    instruction_preview: Optional[List[int]] = Field(default=[],
                                      description="–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –≤–∏–¥–µ 0x...",
                                      example=[0xf10, 0x1, 0x2])
    data: Optional[List[int]] = Field(default=[],
        description="–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö",
        example=[10, 20, 30, 40, 50])
    data_start_addr: Optional[int] = Field(default=0,
        description="–ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        example=0)

class InstructionRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    instruction: int = Field(...,
        description="32-–±–∏—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ + –æ–ø–µ—Ä–∞–Ω–¥)",
        example=1296)

class ExecutionRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    max_cycles: Optional[int] = Field(default=10000,
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        example=10000)

class BinaryConversionRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–µ–º–±–ª–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞"""
    assembly_code: str = Field(...,
        description="–ê—Å—Å–µ–º–±–ª–µ—Ä–Ω—ã–π –∫–æ–¥ (–æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
        example="PUSH 5\nPUSH 3\nADD\nHALT")

class StateResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —ç–º—É–ª—è—Ç–æ—Ä–∞"""
    stack: List[int] = Field(..., description="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–µ–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    data_memory: List[int] = Field(..., description="–ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 50 —è—á–µ–µ–∫)")
    instruction_memory: List[int] = Field(..., description="–ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥")
    instruction_preview: List[str] = Field(..., description="–ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex")
    pc: int = Field(..., description="–°—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (Program Counter)")
    sp: int = Field(..., description="–£–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–∫–∞ (Stack Pointer)")
    flags: Dict[str, bool] = Field(..., description="–§–ª–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
    halted: bool = Field(..., description="–§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    error: Optional[str] = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    cycles: int = Field(..., description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤")

class MemoryValueRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏"""
    value: int = Field(..., description="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏", example=42)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ endpoints
tags_metadata = [
    {
        "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–º",
        "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —ç–º—É–ª—è—Ç–æ—Ä–∞",
    },
    {
        "name": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º",
        "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
    },
    {
        "name": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º",
        "description": "–ó–∞–ø—É—Å–∫ –∏ –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º",
    },
    {
        "name": "–ê—Å—Å–µ–º–±–ª–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—ã",
        "description": "–†–∞–±–æ—Ç–∞ —Å –∞—Å—Å–µ–º–±–ª–µ—Ä–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö",
    },
    {
        "name": "–ü–∞–º—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∫–∞",
        "description": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é",
    },
    {
        "name": "–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "description": "–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    }
]


def parse_text_program(content_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥–∞[TAB]–∑–Ω–∞—á–µ–Ω–∏–µ"""
    lines = content_str.strip().split('\n')
    instructions = []

    for line_num, line in enumerate(lines, 1):
        line = line.strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if not line or line.startswith('#'):
            continue

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "–∫–æ–º–∞–Ω–¥–∞[tab]–∑–Ω–∞—á–µ–Ω–∏–µ"
            if '\t' in line:
                parts = line.split('\t')
                cmd = parts[0].strip().upper()
                value = parts[1].strip() if len(parts) > 1 and parts[1].strip() else None

                # –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å –æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏
                if cmd == "PUSH" and value is not None:
                    val = int(value)
                    instructions.append(OpCode.PUSH.value | (val << 8))
                elif cmd in ["JMP", "JZ", "JNZ", "JL", "JG", "JLE", "JGE"] and value is not None:
                    addr = int(value)
                    opcode_map = {
                        "JMP": OpCode.JMP, "JZ": OpCode.JZ, "JNZ": OpCode.JNZ,
                        "JL": OpCode.JL, "JG": OpCode.JG, "JLE": OpCode.JLE, "JGE": OpCode.JGE
                    }
                    instructions.append(opcode_map[cmd].value | (addr << 8))
                else:
                    # –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
                    opcode_map = {
                        "ADD": OpCode.ADD, "SUB": OpCode.SUB, "MUL": OpCode.MUL, "DIV": OpCode.DIV,
                        "AND": OpCode.AND, "OR": OpCode.OR, "XOR": OpCode.XOR, "NOT": OpCode.NOT,
                        "CMP": OpCode.CMP, "POP": OpCode.POP, "DUP": OpCode.DUP, "SWAP": OpCode.SWAP,
                        "LOAD": OpCode.LOAD, "STORE": OpCode.STORE, "HALT": OpCode.HALT, "NOP": OpCode.NOP
                    }
                    if cmd in opcode_map:
                        instructions.append(opcode_map[cmd].value)
                    else:
                        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–∞–±—É–ª—è—Ü–∏–∏
                if line.startswith('0x'):
                    instructions.append(int(line, 16))
                elif line.isdigit() or (line.startswith('-') and line[1:].isdigit()):
                    instructions.append(int(line))
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –æ–ø–µ—Ä–∞–Ω–¥–∞
                    cmd = line.upper()
                    opcode_map = {
                        "ADD": OpCode.ADD, "SUB": OpCode.SUB, "MUL": OpCode.MUL, "DIV": OpCode.DIV,
                        "AND": OpCode.AND, "OR": OpCode.OR, "XOR": OpCode.XOR, "NOT": OpCode.NOT,
                        "CMP": OpCode.CMP, "POP": OpCode.POP, "DUP": OpCode.DUP, "SWAP": OpCode.SWAP,
                        "LOAD": OpCode.LOAD, "STORE": OpCode.STORE, "HALT": OpCode.HALT, "NOP": OpCode.NOP
                    }
                    if cmd in opcode_map:
                        instructions.append(opcode_map[cmd].value)
                    else:
                        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {line}")

        except ValueError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num} ('{line}'): {e}")

    return instructions

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üñ•Ô∏è API —ç–º—É–ª—è—Ç–æ—Ä–∞ –±–µ–∑–∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç–µ–∫–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
    description="""
## –û–ø–∏—Å–∞–Ω–∏–µ
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä –±–µ–∑–∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç–µ–∫–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–º–∞–Ω–¥.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- üîÑ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
- üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
- üíæ –†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–º–∞–Ω–¥
- üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞—Å—Å–µ–º–±–ª–µ—Ä
- üìä –ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º –∏–∑ —Ñ–∞–π–ª–æ–≤
- üéØ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- **24 –∫–æ–º–∞–Ω–¥—ã**: –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞, –ª–æ–≥–∏–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥—ã, —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é
- **–°—Ç–µ–∫ –¥–∞–Ω–Ω—ã—Ö**: –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤
- **–ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö**: 30 —è—á–µ–µ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã
- **–ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥**: 30 —è—á–µ–µ–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
- **–§–ª–∞–≥–∏**: zero, negative, overflow, carry

## –§–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
–ö–∞–∂–¥–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ:
- –ë–∏—Ç—ã 0-7: –∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ë–∏—Ç—ã 8-31: –æ–ø–µ—Ä–∞–Ω–¥ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

–ü—Ä–∏–º–µ—Ä: `0x510` = `PUSH 5` (0x10 - PUSH, 0x5 - –∑–Ω–∞—á–µ–Ω–∏–µ)
    """,
    version="2.0.0",
    openapi_tags=tags_metadata,
    contact={
        "name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞",
        "email": "IsaevSlava.2001@yandex.ru",
    },
    license_info={
        "name": "MIT License",
    }
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–º—É–ª—è—Ç–æ—Ä–∞
emulator = StackEmulator()

# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
PRELOADED_PROGRAMS = {
    "simple_math": {
        "name": "–ü—Ä–æ—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: (5 + 3) * 2",
        "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
        "instructions": [
            (OpCode.PUSH.value | (5 << 8)),     # PUSH 5
            (OpCode.PUSH.value | (3 << 8)),     # PUSH 3
            OpCode.ADD.value,                    # ADD (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: 8)
            (OpCode.PUSH.value | (2 << 8)),     # PUSH 2
            OpCode.MUL.value,                    # MUL (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: 16)
            OpCode.HALT.value                    # HALT
        ]
    },
    "factorial": {
        "name": "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ 5",
        "description": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ 5",
        "instructions": [
            OpCode.PUSH.value | (5 << 8),
            OpCode.PUSH.value | (0 << 8),
            OpCode.CMP.value,
            OpCode.JZ.value | (8 << 8),
            OpCode.DUP.value,
            OpCode.PUSH.value | (1 << 8),
            OpCode.SUB.value,
            OpCode.JMP.value | (1 << 8),
            OpCode.POP.value,
            OpCode.MUL.value,
            OpCode.MUL.value,
            OpCode.MUL.value,
            OpCode.MUL.value,
            OpCode.HALT.value                   # HALT
        ]
    },
    "task1": {
        "name": "–ó–∞–¥–∞–Ω–∏–µ1",
        "description": "–ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ",
        "instructions": [
        ]
    },
    "task2": {
        "name": "–ó–∞–¥–∞–Ω–∏–µ 2",
        "description": "–°–≤—ë—Ä—Ç–∫–∞ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤",
        "instructions": [
        ]
    },
}

@app.get("/",
    tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–º"],
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
)
async def root():
    """
    ## –ö–æ—Ä–Ω–µ–≤–æ–π endpoint

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ —ç–º—É–ª—è—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞—è:
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—é API
    - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    - –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    """
    return {
        "message": "üñ•Ô∏è API —ç–º—É–ª—è—Ç–æ—Ä–∞ –±–µ–∑–∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç–µ–∫–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "version": "2.0.0",
        "description": "–≠–º—É–ª—è—Ç–æ—Ä —Å —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é –∫–æ–º–∞–Ω–¥ –∏ –¥–∞–Ω–Ω—ã—Ö",
        "features": [
            "24 –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
            "–ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞—Å—Å–µ–º–±–ª–µ—Ä",
            "–†–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é",
            "–ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        ],
        "documentation": "/docs",
        "status": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    }

@app.post("/reset",
    response_model=StateResponse,
    tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–º"],
    summary="–°–±—Ä–æ—Å —ç–º—É–ª—è—Ç–æ—Ä–∞",
    description="–°–±—Ä–æ—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö",
    status_code=status.HTTP_200_OK
)
async def reset_emulator():
    """
    ## –°–±—Ä–æ—Å —ç–º—É–ª—è—Ç–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —ç–º—É–ª—è—Ç–æ—Ä–∞:
    - –û—á–∏—â–∞–µ—Ç —Å—Ç–µ–∫ –¥–∞–Ω–Ω—ã—Ö
    - –û–±–Ω—É–ª—è–µ—Ç –ø–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö
    - –û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥
    - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ (PC, SP)
    - –û—á–∏—â–∞–µ—Ç —Ñ–ª–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤

    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    emulator.reset()
    return StateResponse(**emulator.get_state())

@app.post("/load_program",
    response_model=StateResponse,
    tags=["–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    description="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —ç–º—É–ª—è—Ç–æ—Ä"
)
async def load_program(request: ProgramRequest):
    """
    ## –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–∞–Ω–Ω—ã—Ö –≤ —ç–º—É–ª—è—Ç–æ—Ä

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –ø–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `instructions`: –ú–∞—Å—Å–∏–≤ 32-–±–∏—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    - `data`: –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - `data_start_addr`: –ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

    **–§–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
    ```
    31    8 7     0
    [–æ–ø–µ—Ä–∞–Ω–¥][–æ–ø–∫–æ–¥]
    ```

    **–ü—Ä–∏–º–µ—Ä:** `0x510` = PUSH 5 (0x10 = PUSH, 0x5 = –æ–ø–µ—Ä–∞–Ω–¥)
    """
    try:
        emulator.reset()
        emulator.load_program(request.instructions)
        if request.data:
            emulator.load_data(request.data, request.data_start_addr)
        return StateResponse(**emulator.get_state())
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}"
        )

@app.post("/load_from_file",
    tags=["–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–∞–π–ª–∞",
    description="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"
)
async def load_program_from_file(file: UploadFile = File(..., description="–§–∞–π–ª —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π (JSON, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π)")):
    """
    ## –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–∞–π–ª–∞

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:

    ### JSON —Ñ–æ—Ä–º–∞—Ç
    ```json
    {
      "instructions": [1296, 784, 1, 153],
      "data": [10, 20, 30],
      "data_start_addr": 0
    }
    ```

    ### –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—á–∏—Å–ª–∞)
    –û–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫—É (–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ –∏–ª–∏ hex —á–∏—Å–ª–æ):
    ```
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
    1296
    0x310
    1
    153
    ```

    ### ‚≠ê –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π) - –ù–û–í–ò–ù–ö–ê!
    **–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:** –∫–æ–º–∞–Ω–¥–∞[TAB]–∑–Ω–∞—á–µ–Ω–∏–µ(–µ—Å–ª–∏ –µ—Å—Ç—å)
    ```
    # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (5 + 3) * 2
    PUSH	5
    PUSH	3
    ADD
    PUSH	2
    MUL
    HALT
    ```

    ### –ö–æ–º–∞–Ω–¥—ã —Å –æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏ (—Ç—Ä–µ–±—É—é—Ç TAB + –∑–Ω–∞—á–µ–Ω–∏–µ):
    - `PUSH[TAB]–∑–Ω–∞—á–µ–Ω–∏–µ` - –ø–æ–º–µ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–µ–∫
    - `JMP[TAB]–∞–¥—Ä–µ—Å` - –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å
    - `JZ[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ zero flag
    - `JNZ[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ –ù–ï zero flag
    - `JL[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ less flag
    - `JG[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ greater flag
    - `JLE[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ less or equal
    - `JGE[TAB]–∞–¥—Ä–µ—Å` - –ø–µ—Ä–µ–π—Ç–∏ –µ—Å–ª–∏ greater or equal

    ### –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ):
    `ADD`, `SUB`, `MUL`, `DIV`, `AND`, `OR`, `XOR`, `NOT`, `CMP`,
    `POP`, `DUP`, `SWAP`, `LOAD`, `STORE`, `HALT`, `NOP`

    **‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ú–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–æ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–±—É–ª—è—Ü–∏—è (TAB), –Ω–µ –ø—Ä–æ–±–µ–ª—ã!

    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:** `.json`, `.txt`, `.asm`
    """
    try:
        content = await file.read()

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
        if file.filename.endswith('.json'):
            data = json.loads(content.decode('utf-8'))
            instructions = data.get('instructions', [])
            program_data = data.get('data', [])
            data_start_addr = data.get('data_start_addr', 0)
            format_used = "JSON"
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–±—É–ª—è—Ü–∏–∏)
            content_str = content.decode('utf-8')[1:]
            instructions = parse_text_program(content_str)
            program_data = []
            data_start_addr = 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            if '\t' in content_str:
                format_used = "–¢–µ–∫—Å—Ç–æ–≤—ã–π (–∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π)"
            else:
                format_used = "–¢–µ–∫—Å—Ç–æ–≤—ã–π (—á–∏—Å–ª–æ–≤–æ–π)"

        emulator.reset()
        emulator.load_program(instructions)
        if program_data:
            emulator.load_data(program_data, data_start_addr)

        return {
            "success": True,
            "message": f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file.filename}",
            "format": format_used,
            "instructions_count": len(instructions),
            "data_count": len(program_data),
            "instructions_preview": [hex(x) for x in instructions[:5]] if instructions else [],
            "state": emulator.get_state()
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        )

@app.post("/step",
    response_model=StateResponse,
    tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞",
    description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
)
async def step_execution():
    """
    ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**
    1. –°—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É PC
    2. –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –æ–ø–∫–æ–¥ –∏ –æ–ø–µ—Ä–∞–Ω–¥
    3. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    4. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è PC –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    5. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤

    **–°–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**
    - –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è: PC —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ HALT –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    try:
        emulator.step()
        return StateResponse(**emulator.get_state())
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞: {str(e)}"
        )

@app.post("/run",
    response_model=StateResponse,
    tags=["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
    description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –∫–æ–º–∞–Ω–¥—ã HALT –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ü–∏–∫–ª–æ–≤"
)
async def run_program(request: ExecutionRequest):
    """
    ## –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–æ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—Å–ª–æ–≤–∏–π:
    - –í—Å—Ç—Ä–µ—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `HALT`
    - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã (PC >= —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥)
    - –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ü–∏–∫–ª–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤)
    - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `max_cycles`: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000)

    **–ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è:**
    –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–∞ max_cycles, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
    —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        emulator.run_until_halt(request.max_cycles)
        return StateResponse(**emulator.get_state())
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}"
        )

@app.get("/state",
    response_model=StateResponse,
    tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–º"],
    summary="–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"
)
async def get_current_state():
    """
    ## –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:

    ### –°—Ç–µ–∫ –¥–∞–Ω–Ω—ã—Ö
    - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–∫–∞
    - –£–∫–∞–∑–∞—Ç–µ–ª—å –≤–µ—Ä—à–∏–Ω—ã —Å—Ç–µ–∫–∞ (SP)

    ### –ü–∞–º—è—Ç—å
    - –ü–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 50 —è—á–µ–µ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞)
    - –ü–∞–º—è—Ç—å –∫–æ–º–∞–Ω–¥ (–≤—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞)

    ### –†–µ–≥–∏—Å—Ç—Ä—ã –∏ —Ñ–ª–∞–≥–∏
    - PC (Program Counter): —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
    - SP (Stack Pointer): —É–∫–∞–∑–∞—Ç–µ–ª—å –≤–µ—Ä—à–∏–Ω—ã —Å—Ç–µ–∫–∞
    - –§–ª–∞–≥–∏: zero, negative, overflow, carry

    ### –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (halted)
    - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    """
    return StateResponse(**emulator.get_state())

@app.post("/add_instruction",
    tags=["–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"],
    summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    description="–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ"
)
async def add_manual_instruction(request: InstructionRequest):
    """
    ## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é

    –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –∫–æ–Ω—Ü—É —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `instruction`: 32-–±–∏—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–æ–ø–∫–æ–¥ + –æ–ø–µ—Ä–∞–Ω–¥)

    **–§–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
    - –ë–∏—Ç—ã 0-7: –∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–º. `/opcodes`)
    - –ë–∏—Ç—ã 8-31: –æ–ø–µ—Ä–∞–Ω–¥ (–∑–Ω–∞—á–µ–Ω–∏–µ, –∞–¥—Ä–µ—Å –∏ —Ç.–¥.)

    **–ü—Ä–∏–º–µ—Ä—ã:**
    - `0x510` = PUSH 5
    - `0x01` = ADD
    - `0x99` = HALT

    **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:** –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        current_state = emulator.get_state()
        instructions = current_state['instruction_memory'].copy()
        instructions.append(request.instruction)
        emulator.load_program(instructions)
        return {
            "success": True,
            "message": "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            "instruction_hex": hex(request.instruction),
            "total_instructions": len(instructions),
            "state": emulator.get_state()
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {str(e)}"
        )

@app.get("/preloaded_programs",
    tags=["–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º-–ø—Ä–∏–º–µ—Ä–æ–≤"
)
async def get_preloaded_programs():
    """
    ## –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —ç–º—É–ª—è—Ç–æ—Ä–∞.

    ### –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
    - **simple_math**: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - **factorial**: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å —Ü–∏–∫–ª–∞–º–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏

    –ö–∞–∂–¥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    - –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏ –∏–∑—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —ç–º—É–ª—è—Ç–æ—Ä–∞
    """
    return {
        "programs": {
            program_id: {
                "name": program["name"],
                "description": program["description"],
                "instruction_count": len(program["instructions"])
            }
            for program_id, program in PRELOADED_PROGRAMS.items()
        },
        "total_count": len(PRELOADED_PROGRAMS)
    }

@app.post("/load_preloaded/{program_id}",
    response_model=StateResponse,
    tags=["–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"],
    summary="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    description="–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤"
)
async def load_preloaded_program(program_id: str):
    """
    ## –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.

    **–î–æ—Å—Ç—É–ø–Ω—ã–µ ID –ø—Ä–æ–≥—Ä–∞–º–º:**
    - `simple_math`: (5 + 3) * 2 = 16
    - `factorial`: 5! = 120

    **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:**
    1. –°–±—Ä–æ—Å —ç–º—É–ª—è—Ç–æ—Ä–∞
    2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    3. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
    4. –í–æ–∑–≤—Ä–∞—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    **–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/step` –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    –∏–ª–∏ `/run` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    if program_id not in PRELOADED_PROGRAMS:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ '{program_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(PRELOADED_PROGRAMS.keys())}"
        )

    try:
        program = PRELOADED_PROGRAMS[program_id]
        emulator.reset()
        emulator.load_program(program["instructions"])
        if "data" in program:
            emulator.load_data(program["data"])

        return StateResponse(**emulator.get_state())
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}"
        )

@app.post("/convert_to_binary",
    tags=["–ê—Å—Å–µ–º–±–ª–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—ã"],
    summary="–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Å—Å–µ–º–±–ª–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞",
    description="–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞—Å—Å–µ–º–±–ª–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
)
async def convert_to_binary(request: BinaryConversionRequest):
    """
    ## –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞—Å—Å–µ–º–±–ª–µ—Ä

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞—Å—Å–µ–º–±–ª–µ—Ä–Ω—ã–π –∫–æ–¥ –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

    ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:
    ```
    PUSH 5          ; –ü–æ–º–µ—Å—Ç–∏—Ç—å 5 –Ω–∞ —Å—Ç–µ–∫
    PUSH 3          ; –ü–æ–º–µ—Å—Ç–∏—Ç—å 3 –Ω–∞ —Å—Ç–µ–∫
    ADD             ; –°–ª–æ–∂–∏—Ç—å –¥–≤–∞ –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
    HALT            ; –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    ```

    ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - **–°—Ç–µ–∫:** PUSH, POP, DUP, SWAP
    - **–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞:** ADD, SUB, MUL, DIV
    - **–õ–æ–≥–∏–∫–∞:** AND, OR, XOR, NOT, CMP
    - **–ü–∞–º—è—Ç—å:** LOAD, STORE
    - **–ü–µ—Ä–µ—Ö–æ–¥—ã:** JMP, JZ, JNZ, JL, JG, JLE, JGE
    - **–°–∏—Å—Ç–µ–º–∞:** HALT, NOP

    ### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `;` –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)

    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —ç–º—É–ª—è—Ç–æ—Ä
    """
    try:
        lines = request.assembly_code.strip().split('\n')
        instructions = []

        for line_num, line in enumerate(lines, 1):
            line = line.strip().upper()
            if not line or line.startswith(';'):
                continue

            parts = line.split()
            if not parts:
                continue

            cmd = parts[0]

            try:
                # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥
                if cmd == "PUSH" and len(parts) > 1:
                    value = int(parts[1])
                    instructions.append(OpCode.PUSH.value | (value << 8))
                elif cmd == "POP":
                    instructions.append(OpCode.POP.value)
                elif cmd == "ADD":
                    instructions.append(OpCode.ADD.value)
                elif cmd == "SUB":
                    instructions.append(OpCode.SUB.value)
                elif cmd == "MUL":
                    instructions.append(OpCode.MUL.value)
                elif cmd == "DIV":
                    instructions.append(OpCode.DIV.value)
                elif cmd == "DUP":
                    instructions.append(OpCode.DUP.value)
                elif cmd == "SWAP":
                    instructions.append(OpCode.SWAP.value)
                elif cmd == "HALT":
                    instructions.append(OpCode.HALT.value)
                elif cmd == "NOP":
                    instructions.append(OpCode.NOP.value)
                elif cmd == "AND":
                    instructions.append(OpCode.AND.value)
                elif cmd == "OR":
                    instructions.append(OpCode.OR.value)
                elif cmd == "XOR":
                    instructions.append(OpCode.XOR.value)
                elif cmd == "NOT":
                    instructions.append(OpCode.NOT.value)
                elif cmd == "CMP":
                    instructions.append(OpCode.CMP.value)
                elif cmd == "LOAD":
                    instructions.append(OpCode.LOAD.value)
                elif cmd == "STORE":
                    instructions.append(OpCode.STORE.value)
                elif cmd.startswith("J") and len(parts) > 1:
                    # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
                    addr = int(parts[1])
                    if cmd == "JMP":
                        instructions.append(OpCode.JMP.value | (addr << 8))
                    elif cmd == "JZ":
                        instructions.append(OpCode.JZ.value | (addr << 8))
                    elif cmd == "JNZ":
                        instructions.append(OpCode.JNZ.value | (addr << 8))
                    elif cmd == "JL":
                        instructions.append(OpCode.JL.value | (addr << 8))
                    elif cmd == "JG":
                        instructions.append(OpCode.JG.value | (addr << 8))
                    elif cmd == "JLE":
                        instructions.append(OpCode.JLE.value | (addr << 8))
                    elif cmd == "JGE":
                        instructions.append(OpCode.JGE.value | (addr << 8))
                    else:
                        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {cmd}")
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            except ValueError as ve:
                raise ValueError(f"–°—Ç—Ä–æ–∫–∞ {line_num}: {ve}")

        return {
            "success": True,
            "instructions": instructions,
            "hex_instructions": [hex(x) for x in instructions],
            "instructions_preview": [hex(x) for x in instructions[:5]] if instructions else [],
            "instructions_count": len(instructions),
            "message": f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ {len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–û—à–∏–±–∫–∞ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

@app.get("/opcodes",
    tags=["–ê—Å—Å–µ–º–±–ª–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—ã"],
    summary="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
    description="–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —ç–º—É–ª—è—Ç–æ—Ä–∞"
)
async def get_opcodes():
    """
    ## –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 24 –∫–æ–º–∞–Ω–¥ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.

    ### –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:

    #### üßÆ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ (0x01-0x04)
    - ADD, SUB, MUL, DIV

    #### üîß –õ–æ–≥–∏—á–µ—Å–∫–∏–µ (0x05-0x08)
    - AND, OR, XOR, NOT

    #### üìö –°—Ç–µ–∫–æ–≤—ã–µ (0x10-0x13)
    - PUSH, POP, DUP, SWAP

    #### üíæ –ü–∞–º—è—Ç—å (0x20-0x21)
    - LOAD, STORE

    #### üîÄ –ü–µ—Ä–µ—Ö–æ–¥—ã (0x30-0x36)
    - JMP, JZ, JNZ, JL, JG, JLE, JGE

    #### ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ
    - HALT (0x99), NOP (0x00), CMP (0x09)

    **–ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:**
    - –ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏ (hex –∏ decimal)
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    """
    categories = {
        "arithmetic": {"name": "üßÆ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ", "opcodes": []},
        "logical": {"name": "üîß –õ–æ–≥–∏—á–µ—Å–∫–∏–µ", "opcodes": []},
        "stack": {"name": "üìö –°—Ç–µ–∫–æ–≤—ã–µ", "opcodes": []},
        "memory": {"name": "üíæ –ü–∞–º—è—Ç—å", "opcodes": []},
        "jumps": {"name": "üîÄ –ü–µ—Ä–µ—Ö–æ–¥—ã", "opcodes": []},
        "system": {"name": "‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ", "opcodes": []}
    }

    for opcode in OpCode:
        info = {
            "name": opcode.name,
            "value": opcode.value,
            "hex": hex(opcode.value),
            "description": _get_opcode_description(opcode)
        }

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        if opcode.value in [0x01, 0x02, 0x03, 0x04]:
            categories["arithmetic"]["opcodes"].append(info)
        elif opcode.value in [0x05, 0x06, 0x07, 0x08]:
            categories["logical"]["opcodes"].append(info)
        elif opcode.value in [0x10, 0x11, 0x12, 0x13]:
            categories["stack"]["opcodes"].append(info)
        elif opcode.value in [0x20, 0x21]:
            categories["memory"]["opcodes"].append(info)
        elif opcode.value in [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36]:
            categories["jumps"]["opcodes"].append(info)
        else:
            categories["system"]["opcodes"].append(info)

    return {
        "categories": categories,
        "total_opcodes": len(OpCode),
        "instruction_format": "32-bit: [24-bit –æ–ø–µ—Ä–∞–Ω–¥][8-bit –æ–ø–∫–æ–¥]"
    }

def _get_opcode_description(opcode: OpCode) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    descriptions = {
        OpCode.ADD: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ —Å–æ —Å—Ç–µ–∫–∞, —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏—Ö –∏ –ø–æ–º–µ—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç–µ–∫",
        OpCode.SUB: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ (b, a), –≤—ã—á–∏—Å–ª—è–µ—Ç a-b –∏ –ø–æ–º–µ—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç–µ–∫",
        OpCode.MUL: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ —Å–æ —Å—Ç–µ–∫–∞, —É–º–Ω–æ–∂–∞–µ—Ç –∏—Ö –∏ –ø–æ–º–µ—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç–µ–∫",
        OpCode.DIV: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ (b, a), –≤—ã—á–∏—Å–ª—è–µ—Ç a/b –∏ a%b, –ø–æ–º–µ—â–∞–µ—Ç —á–∞—Å—Ç–Ω–æ–µ –∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—Ç–µ–∫",
        OpCode.AND: "–ü–æ–±–∏—Ç–æ–≤–æ–µ –ò –¥–≤—É—Ö –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–∫–∞",
        OpCode.OR: "–ü–æ–±–∏—Ç–æ–≤–æ–µ –ò–õ–ò –¥–≤—É—Ö –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–∫–∞",
        OpCode.XOR: "–ü–æ–±–∏—Ç–æ–≤–æ–µ –∏—Å–∫–ª—é—á–∞—é—â–µ–µ –ò–õ–ò –¥–≤—É—Ö –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–∫–∞",
        OpCode.NOT: "–ü–æ–±–∏—Ç–æ–≤–æ–µ –ù–ï –≤–µ—Ä—Ö–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–µ–∫–∞",
        OpCode.CMP: "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–µ–∫–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ (zero, negative)",
        OpCode.PUSH: "–ü–æ–º–µ—â–∞–µ—Ç –æ–ø–µ—Ä–∞–Ω–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Å—Ç–µ–∫",
        OpCode.POP: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ —Å—Ç–µ–∫–∞ (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)",
        OpCode.DUP: "–î—É–±–ª–∏—Ä—É–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞",
        OpCode.SWAP: "–ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –¥–≤–∞ –≤–µ—Ä—Ö–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–µ–∫–∞",
        OpCode.LOAD: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å —Å–æ —Å—Ç–µ–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É",
        OpCode.STORE: "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å —Å–æ —Å—Ç–µ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –¥–∞–Ω–Ω—ã—Ö",
        OpCode.JMP: "–ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–ø–µ—Ä–∞–Ω–¥–µ",
        OpCode.JZ: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ zero",
        OpCode.JNZ: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ zero",
        OpCode.JL: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ negative (–º–µ–Ω—å—à–µ)",
        OpCode.JG: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ negative –∏ zero (–±–æ–ª—å—à–µ)",
        OpCode.JLE: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ negative –ò–õ–ò zero (–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ)",
        OpCode.JGE: "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ negative (–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ)",
        OpCode.HALT: "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        OpCode.NOP: "–ü—É—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç (—Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç PC)"
    }
    return descriptions.get(opcode, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

@app.get("/memory/{address}",
    tags=["–ü–∞–º—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∫–∞"],
    summary="–ß—Ç–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
)
async def get_memory_cell(address: int):
    """
    ## –ß—Ç–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `address`: –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ (0-999)

    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏
    - –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    - –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –û—Ç–ª–∞–¥–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–º—è—Ç–∏
    """
    try:
        if 0 <= address < len(emulator.state.data_memory):
            value = emulator.state.data_memory[address]
            return {
                "address": address,
                "value": value,
                "hex_value": hex(value),
                "binary_value": bin(value),
                "is_zero": value == 0
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-{len(emulator.state.data_memory)-1}"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}"
        )

@app.post("/memory/{address}",
    tags=["–ü–∞–º—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∫–∞"],
    summary="–ó–∞–ø–∏—Å—å –≤ —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏",
    description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
)
async def set_memory_cell(address: int, request: MemoryValueRequest):
    """
    ## –ó–∞–ø–∏—Å—å –≤ —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `address`: –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –ø–∞–º—è—Ç–∏ (0-999)
    - `value`: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏

    **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
    - –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ

    **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    try:
        if 0 <= address < len(emulator.state.data_memory):
            emulator.state.data_memory[address] = request.value
            return {
                "success": True,
                "message": f"‚úÖ –Ø—á–µ–π–∫–∞ –ø–∞–º—è—Ç–∏ {address} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {request.value}",
                "address": address,
                "old_value": emulator.state.data_memory[address],
                "new_value": request.value,
                "hex_value": hex(request.value)
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-{len(emulator.state.data_memory)-1}"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç—å: {str(e)}"
        )

@app.get("/stack",
    tags=["–ü–∞–º—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∫–∞"],
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ–∫–µ",
    description="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–µ–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
)
async def get_stack_info():
    """
    ## –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ–∫–µ –¥–∞–Ω–Ω—ã—Ö

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–µ–∫–∞.

    ### –°–æ–¥–µ—Ä–∂–∏—Ç:
    - **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–µ–∫–∞** (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç –¥–Ω–∞ –∫ –≤–µ—Ä—à–∏–Ω–µ)
    - **–†–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞** (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    - **–£–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–∫–∞** (SP)
    - **–í–µ—Ä—à–∏–Ω–∞ —Å—Ç–µ–∫–∞** (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
    - **–°–æ—Å—Ç–æ—è–Ω–∏–µ** (–ø—É—Å—Ç–æ–π/–∑–∞–ø–æ–ª–Ω–µ–Ω)

    ### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
    - –û—Ç–ª–∞–¥–∫–∞ —Å—Ç–µ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    """
    stack_info = {
        "stack": emulator.state.stack,
        "size": len(emulator.state.stack),
        "pointer": emulator.state.sp,
        "top": emulator.state.stack[-1] if emulator.state.stack else None,
        "is_empty": len(emulator.state.stack) == 0,
        "capacity": "unlimited"
    }

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if emulator.state.stack:
        stack_info.update({
            "sum": sum(emulator.state.stack),
            "max": max(emulator.state.stack),
            "min": min(emulator.state.stack),
            "average": sum(emulator.state.stack) / len(emulator.state.stack)
        })

    return stack_info

@app.get("/instruction/{address}",
    tags=["–ü–∞–º—è—Ç—å –∏ –æ—Ç–ª–∞–¥–∫–∞"],
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    description="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É"
)
async def get_instruction(address: int):
    """
    ## –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - `address`: –ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –∫–æ–º–∞–Ω–¥ (0 - —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã)

    ### –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    - **–ê–¥—Ä–µ—Å** –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    - **–°—ã—Ä–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** (32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ)
    - **–ö–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏** (–º–ª–∞–¥—à–∏–π –±–∞–π—Ç)
    - **–û–ø–µ—Ä–∞–Ω–¥** (—Å—Ç–∞—Ä—à–∏–µ –±–∞–π—Ç—ã)
    - **–ú–Ω–µ–º–æ–Ω–∏–∫–∞** –∫–æ–º–∞–Ω–¥—ã (ADD, PUSH –∏ —Ç.–¥.)
    - **–û–ø–∏—Å–∞–Ω–∏–µ** –æ–ø–µ—Ä–∞—Ü–∏–∏
    - **–§–æ—Ä–º–∞—Ç—ã** (hex, binary)

    **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** –î–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º
    """
    try:
        if 0 <= address < len(emulator.state.instruction_memory):
            instruction = emulator.state.instruction_memory[address]
            opcode_val = instruction & 0xFF
            operand = instruction >> 8

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π OpCode
            opcode = None
            for op in OpCode:
                if op.value == opcode_val:
                    opcode = op
                    break

            result = {
                "address": address,
                "raw_instruction": instruction,
                "hex_instruction": hex(instruction),
                "binary_instruction": bin(instruction),
                "opcode": opcode.name if opcode else "UNKNOWN",
                "opcode_value": opcode_val,
                "opcode_hex": hex(opcode_val),
                "operand": operand,
                "operand_hex": hex(operand) if operand else "0x0",
                "description": _get_opcode_description(opcode) if opcode else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–µ–º–æ–Ω–∏–∫—É –∞—Å—Å–µ–º–±–ª–µ—Ä–∞
            if opcode == OpCode.PUSH:
                result["assembly"] = f"PUSH {operand}"
            elif opcode and opcode.name.startswith("J") and operand:
                result["assembly"] = f"{opcode.name} {operand}"
            elif opcode:
                result["assembly"] = opcode.name
            else:
                result["assembly"] = f"UNKNOWN {hex(instruction)}"

            return result
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-{len(emulator.state.instruction_memory)-1}"
            )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
